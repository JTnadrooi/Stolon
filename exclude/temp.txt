mouseClickElementBoundsCoefficient -= mouseClickElementBoundsCoefficient * mouseClickElementBoundsCoefficient * 0.1f;
            mouseHoverCoefficient -= mouseHoverCoefficient * mouseHoverCoefficient * 0.1f;

            foreach (UIElement uiElement in uiElements.Values)
            {   //I have alot of ways to optimize this but uh il do that later

                if (uiElement.Dock == UIDock.MainMenu) continue;

                List<UIElementDrawData> dockList = uiElement.Dock switch
                {
                    UIDock.Left => dockLeftDrawData,
                    UIDock.Right => dockRightDrawData,
                    _ => throw new Exception()
                };


                string arrowPrefix = ((hoveredElementId == uiElement.Id && mouseHoverCoefficient > 0.6f) ? "> " : string.Empty); // #1: when the ">" should show.
                Vector2 elementPosition = GetDockOrigin(uiElement.Dock) + new Vector2(0, dockList.Count * lineHeight);
                Rectangle elementRectangle = new Rectangle((elementPosition
                    + new Vector2(
                        -outlineSpacing, -2f)).ToPoint(), new Vector2((lineX1 - uiLeftOffset - 3),
                        uifont.MeasureString(uiElement.Text).Y * fontScale + 2f).ToPoint()); // the rectangle around the element.


                elementPosition += new Vector2(-uifont.MeasureString(arrowPrefix).X * fontScale + 3, 0); // #1: text distance from left border. #2: same but with top border.
                bool elementIsHovered = elementRectangle.Contains(DLMouse.VirualPosition) && mouseIsOnUI;
                bool elementIsPressed = elementIsHovered && DLMouse.IsPressed(DLMouse.MouseButton.Left);
                bool drawRectangle = uiElement.Type == UIElementType.Expandable || uiElement.Type == UIElementType.Clickable;
                if (!drawRectangle) // if there is no rectangle, the element is not clickable (or hoverable)
                {
                    elementIsPressed = false;
                    elementIsHovered = false;
                }

                if (elementIsPressed && DLMouse.PreviousState.LeftButton == ButtonState.Released) // if element is clicked
                {
                    Instance.DebugStream.WriteLine("\tui-element with id " + uiElement.Id + " clicked.");
                    pressedElementId = uiElement.Id;
                    mouseClickElementBoundsCoefficient = 1f;
                }
                if (pressedElementId == uiElement.Id)
                {
                    mouseClickFillElementBounds = new Rectangle(elementRectangle.X, elementRectangle.Y, (int)(elementRectangle.Width * mouseClickElementBoundsCoefficient), elementRectangle.Height);
                }
                if (elementIsHovered)
                {
                    if (hoveredElementId != uiElement.Id) mouseHoverCoefficient = 0f;
                    hoveredElementId = uiElement.Id;
                    mouseHoverCoefficient += 0.1f;
                }
                if (hoveredElementId == uiElement.Id)
                {
                    elementPosition += new Vector2(10f * mouseHoverCoefficient, 0f);
                }

                dockList.Add(new UIElementDrawData(arrowPrefix + uiElement.Text, uiElement.Type, elementPosition, elementRectangle, drawRectangle));
                updateData[uiElement.Id] = new UIElementUpdateData(elementIsPressed, uiElement.Id);
            }